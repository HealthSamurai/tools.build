;   Copyright (c) Rich Hickey. All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;   which can be found in the file epl-v10.html at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.

(ns clojure.tools.build.tasks
  (:require
    [clojure.java.io :as jio]
    [clojure.string :as str]
    [clojure.tools.build.file :as file])
  (:import
    [java.io File FileOutputStream FileInputStream BufferedInputStream]
    [java.nio.file Path Paths Files LinkOption]
    [java.util.jar Manifest Attributes$Name JarOutputStream JarEntry]))

;; clean

(defn clean
  [{:keys [params] :as build-info}]
  (let [{:build/keys [target-dir]} params]
    (println "Cleaning" target-dir)
    (file/delete target-dir)
    build-info))

;; aot

(defn aot
  [{:keys [params] :as build-info}]
  (let [{:build/keys [target-dir clj-paths]} params]
    (println "AOT compiling Clojure")

    ;; TODO

    build-info))

;; javac

(defn javac
  [{:keys [params] :as build-info}]
  (let [{:build/keys [target-dir java-paths]} params]
    (println "Compiling Java")

    ;; TODO

    build-info))

;; pom

(defn sync-pom
  [{:keys [params] :as build-info}]
  (let [{:build/keys [src-pom lib version target-dir]} params
        group-id (or (namespace lib) (name lib))
        artifact-id (name lib)]
    (println "Syncing pom from" src-pom "to" target-dir)
    (let [pom-dir (file/ensure-dir
                    (jio/file target-dir "classes" "META-INF" "maven" group-id artifact-id))]

      ;; TODO: actually run current pom sync
      (jio/copy (jio/file src-pom) (jio/file pom-dir "pom.xml"))

      (spit (jio/file pom-dir "pom.properties")
        (str/join (System/lineSeparator)
          ["# Generated by org.clojure/tools.build"
           (format "# %tc" (java.util.Date.))
           (format "version=%s" version)
           (format "groupId=%s" group-id)
           (format "artifactId=%s" artifact-id)]))
      build-info)))

;; jar

(defn- add-jar-entry
  [^JarOutputStream output-stream ^String lib file]
  (.putNextEntry output-stream (JarEntry. (name lib)))
  (with-open [fis (BufferedInputStream. (FileInputStream. file))]
    (jio/copy fis output-stream))
  (.closeEntry output-stream))

(defn delete-path
  "Recursively delete Path, which may be a file or directory"
  [^Path path]
  (when (.exists (.toFile path))
    (when (Files/isDirectory path (into-array LinkOption [LinkOption/NOFOLLOW_LINKS]))
      (with-open [entries (Files/newDirectoryStream path)]
        (run! delete-path entries)))
    (Files/delete path)))

(defn- copy-to-jar
  ([^JarOutputStream jos ^Path root]
    (copy-to-jar jos root root))
  ([^JarOutputStream jos ^Path root ^Path path]
   (when (.exists (.toFile path))
     (if (Files/isDirectory path (into-array LinkOption [LinkOption/NOFOLLOW_LINKS]))
       (with-open [entries (Files/newDirectoryStream path)]
         (run! #(copy-to-jar jos root %) entries))
       (let [rel-path (.. root (relativize path) toString)]
         (println "  Adding" rel-path)
         (add-jar-entry jos rel-path (.toFile path)))))))

(defn- fill-manifest!
  [^Manifest manifest props]
  (let [attrs (.getMainAttributes manifest)]
    (run!
      (fn [[name value]]
        (.put attrs (Attributes$Name. ^String name) value)) props)))

(defn jar
  [{:keys [params] :as build-info}]
  (let [{:build/keys [lib version main-class target-dir
                      clj-paths resource-dirs]} params
        jar-name (str (name lib) "-" version ".jar")
        jar-file (File. target-dir jar-name)
        class-dir (jio/file target-dir "classes")]
    (println "Writing jar" jar-name)
    (let [manifest (Manifest.)]
      (fill-manifest! manifest
        (cond->
          {"Manifest-Version" "1.0"
           "Created-By" "org.clojure/tools.build"
           "Build-Jdk-Spec" (System/getProperty "java.specification.version")}
          main-class (assoc "Main-Class" main-class)))
      (with-open [jos (JarOutputStream. (FileOutputStream. jar-file) manifest)]
        (copy-to-jar jos (.toPath class-dir))
        (run! #(copy-to-jar jos (Paths/get ^String % (into-array String []))) clj-paths)))

    build-info))

;; end

(defn end
  "Terminate the build and return nil instead of build-info"
  [build-info]
  nil)